
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d1e  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b2  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fb  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ee  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000025ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  c4:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <dot>:
	
}

void E()
{
	dot();
  cc:	2d 9a       	sbi	0x05, 5	; 5
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	83 ed       	ldi	r24, 0xD3	; 211
  d2:	90 e3       	ldi	r25, 0x30	; 48
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <dot+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <dot+0x12>
  de:	00 00       	nop
  e0:	2d 98       	cbi	0x05, 5	; 5
  e2:	08 95       	ret

000000e4 <dash>:
  e4:	2d 9a       	sbi	0x05, 5	; 5
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	8b e7       	ldi	r24, 0x7B	; 123
  ea:	92 e9       	ldi	r25, 0x92	; 146
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <dash+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <dash+0x12>
  f6:	00 00       	nop
  f8:	2d 98       	cbi	0x05, 5	; 5
  fa:	08 95       	ret

000000fc <space>:
  fc:	2d 98       	cbi	0x05, 5	; 5
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	8b e7       	ldi	r24, 0x7B	; 123
 102:	92 e9       	ldi	r25, 0x92	; 146
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <space+0x8>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <space+0x12>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <D>:
 112:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ed       	ldi	r24, 0xD3	; 211
 11a:	90 e3       	ldi	r25, 0x30	; 48
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <D+0xa>
 124:	00 c0       	rjmp	.+0      	; 0x126 <D+0x14>
 126:	00 00       	nop
 128:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	83 ed       	ldi	r24, 0xD3	; 211
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <D+0x20>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <D+0x2a>
 13c:	00 00       	nop
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 142:	08 95       	ret

00000144 <two>:

}

void two()
{
	dot();
 144:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	83 ed       	ldi	r24, 0xD3	; 211
 14c:	90 e3       	ldi	r25, 0x30	; 48
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <two+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <two+0x14>
 158:	00 00       	nop
	_delay_ms(SHORT_DELAY);// Delay between two symbols
	dot();
 15a:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	83 ed       	ldi	r24, 0xD3	; 211
 162:	90 e3       	ldi	r25, 0x30	; 48
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <two+0x20>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <two+0x2a>
 16e:	00 00       	nop
	_delay_ms(SHORT_DELAY);// Delay between two symbols
	dash();
 170:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	83 ed       	ldi	r24, 0xD3	; 211
 178:	90 e3       	ldi	r25, 0x30	; 48
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <two+0x36>
 182:	00 c0       	rjmp	.+0      	; 0x184 <two+0x40>
 184:	00 00       	nop
	_delay_ms(SHORT_DELAY);// Delay between two symbols
	dash();
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	83 ed       	ldi	r24, 0xD3	; 211
 18e:	90 e3       	ldi	r25, 0x30	; 48
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <two+0x4c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <two+0x56>
 19a:	00 00       	nop
	_delay_ms(SHORT_DELAY);// Delay between two symbols
	dash();
 19c:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 1a0:	08 95       	ret

000001a2 <main>:

int main(void)
{
	// DDRB = DDRB or 0010 0000
    // DDRB = 0b00100000 ; // set the pin 5 '1'
	 DDRB = DDRB | (1<<LED_GREEN); //Set pin as output in Data Direction Register
 1a2:	25 9a       	sbi	0x04, 5	; 4

	// PORTB = PORTB and 1101 1111
	PORTB = PORTB & ~(1<<LED_GREEN); //LED off
 1a4:	2d 98       	cbi	0x05, 5	; 5
		
		while (1)
		{	         	
			D(),space(),E(),space(),two(),_delay_ms(7000);  //(DE2 = -.. . ..---       )
 1a6:	0e 94 89 00 	call	0x112	; 0x112 <D>
 1aa:	0e 94 7e 00 	call	0xfc	; 0xfc <space>
	
}

void E()
{
	dot();
 1ae:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
	// PORTB = PORTB and 1101 1111
	PORTB = PORTB & ~(1<<LED_GREEN); //LED off
		
		while (1)
		{	         	
			D(),space(),E(),space(),two(),_delay_ms(7000);  //(DE2 = -.. . ..---       )
 1b2:	0e 94 7e 00 	call	0xfc	; 0xfc <space>
 1b6:	0e 94 a2 00 	call	0x144	; 0x144 <two>
 1ba:	2a ea       	ldi	r18, 0xAA	; 170
 1bc:	34 ed       	ldi	r19, 0xD4	; 212
 1be:	8c e1       	ldi	r24, 0x1C	; 28
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <main+0x20>
 1cc:	00 00       	nop
 1ce:	eb cf       	rjmp	.-42     	; 0x1a6 <main+0x4>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
