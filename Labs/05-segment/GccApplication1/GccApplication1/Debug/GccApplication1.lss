
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010e  0080010e  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed6  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b1  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063f  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000514  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d5  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002df1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:

void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
  *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  *reg_name++;                    // Change pointer to Data Register(if we increment the pointer then the pointer point the PORT register)
  *reg_name = *reg_name & ~(1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}
/*--------------------------------------------------------------------*/

void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);// Clear bit (and not)
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high (volatile uint8_t *reg_name, uint8_t pin_num)
{
	 *reg_name = *reg_name | (1<<pin_num);// Set bit
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
uint8_t cnt1 = 0;   // For the second Display we need to add an other global variable 

int main(void)
{	
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SEG_init>

   
	/* Configure 8-bit Timer/Counter0
     * Set prescaler and enable overflow interrupt */
	
    	TIM0_overflow_4ms();// we set an other timer and each 4ms we change the position
  f4:	85 b5       	in	r24, 0x25	; 37
  f6:	8c 7f       	andi	r24, 0xFC	; 252
  f8:	85 bd       	out	0x25, r24	; 37
  fa:	85 b5       	in	r24, 0x25	; 37
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	85 bd       	out	0x25, r24	; 37
	    TIM0_overflow_interrupt_enable();
 100:	ee e6       	ldi	r30, 0x6E	; 110
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	81 60       	ori	r24, 0x01	; 1
 108:	80 83       	st	Z, r24
     
	/* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
		TIM1_overflow_1s();
 10a:	e1 e8       	ldi	r30, 0x81	; 129
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	80 83       	st	Z, r24
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
		TIM1_overflow_interrupt_enable();
 11a:	ef e6       	ldi	r30, 0x6F	; 111
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
   

    // Enables interrupts by setting the global interrupt mask
	
	 sei();
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x36>

00000128 <__vector_13>:
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */

ISR(TIMER1_OVF_vect)	
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24

    cnt0++;
 134:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 138:	8f 5f       	subi	r24, 0xFF	; 255
	 if(cnt0>=10){
 13a:	8a 30       	cpi	r24, 0x0A	; 10
 13c:	18 f4       	brcc	.+6      	; 0x144 <__vector_13+0x1c>
 */

ISR(TIMER1_OVF_vect)	
{

    cnt0++;
 13e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <cnt0>
 142:	0c c0       	rjmp	.+24     	; 0x15c <__vector_13+0x34>
	 if(cnt0>=10){
		
		cnt0=0;// we have to reset it when the first Display reached the maximum
 144:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt0>

		cnt1++; //but in the same time we have to increment the next counter.
 148:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
	 if(cnt1>=6){
 14e:	86 30       	cpi	r24, 0x06	; 6
 150:	18 f4       	brcc	.+6      	; 0x158 <__vector_13+0x30>
    cnt0++;
	 if(cnt0>=10){
		
		cnt0=0;// we have to reset it when the first Display reached the maximum

		cnt1++; //but in the same time we have to increment the next counter.
 152:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt1>
 156:	02 c0       	rjmp	.+4      	; 0x15c <__vector_13+0x34>
	 if(cnt1>=6){
		 
		 cnt1=0; //if the second Display reach the maximum as well it has to be reseted too.
 158:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt1>
	 } 
	}
}
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_16>:


 ISR(TIMER0_OVF_vect)
 {
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
	 //	uint8_t first_display= 0;
 	 //	uint8_t second_display=1;
		  
	
 		uint8_t display = 0; 
 	if(pos==0)
 18a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 18e:	81 11       	cpse	r24, r1
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <__vector_16+0x3c>
 	{
 		SEG_update_shift_regs(cnt0,display);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 198:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEG_update_shift_regs>
 		pos=1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <__vector_16+0x4a>
 	}
 	else
 	{  
 		display++;
 		SEG_update_shift_regs(cnt1,display);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 1aa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEG_update_shift_regs>
 		pos=0;
 1ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 	}
 	
	 
  
 }
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	8a e2       	ldi	r24, 0x2A	; 42
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	8a e2       	ldi	r24, 0x2A	; 42
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	84 e2       	ldi	r24, 0x24	; 36
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1f2:	08 95       	ret

000001f4 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c8 2f       	mov	r28, r24
 1fc:	d6 2f       	mov	r29, r22
    uint8_t bit_number;
	
	 
	 if(clearsegments==0){
 1fe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <clearsegments>
 202:	81 11       	cpse	r24, r1
 204:	0b c0       	rjmp	.+22     	; 0x21c <SEG_update_shift_regs+0x28>
	  segments = segment_value[segments];     // 0, 1, ..., 9
 206:	ec 2f       	mov	r30, r28
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ec 5f       	subi	r30, 0xFC	; 252
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	c0 81       	ld	r28, Z
	  position = segment_position[position];  // 0, 1, 2, 3
 210:	e6 2f       	mov	r30, r22
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e0 50       	subi	r30, 0x00	; 0
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	d0 81       	ld	r29, Z
 21a:	03 c0       	rjmp	.+6      	; 0x222 <SEG_update_shift_regs+0x2e>
		 }	 
	 else if(clearsegments==1){
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	09 f4       	brne	.+2      	; 0x222 <SEG_update_shift_regs+0x2e>
		 segments=0b11111111;// in order to Turn off the all segments we set all bit 1 because of aktiv low connection
 220:	cf ef       	ldi	r28, 0xFF	; 255
		 }
		 
    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);	// LATCH
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	8b e2       	ldi	r24, 0x2B	; 43
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);		// CLK
 22c:	67 e0       	ldi	r22, 0x07	; 7
 22e:	8b e2       	ldi	r24, 0x2B	; 43
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);	// DATA
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <SEG_update_shift_regs+0x4e>
 246:	00 00       	nop
 248:	18 e0       	ldi	r17, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "segments")
		if((segments % 2)==0) // LSB is 0
 24a:	c0 fd       	sbrc	r28, 0
 24c:	06 c0       	rjmp	.+12     	; 0x25a <SEG_update_shift_regs+0x66>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	85 e2       	ldi	r24, 0x25	; 37
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 258:	05 c0       	rjmp	.+10     	; 0x264 <SEG_update_shift_regs+0x70>
		else   
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	85 e2       	ldi	r24, 0x25	; 37
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <SEG_update_shift_regs+0x72>
 26a:	00 00       	nop
			
        // Wait 1 us
			_delay_us(1);
        // Pull CLK high
			GPIO_write_high(&PORTD,SEGMENT_CLK);
 26c:	67 e0       	ldi	r22, 0x07	; 7
 26e:	8b e2       	ldi	r24, 0x2B	; 43
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <SEG_update_shift_regs+0x84>
 27c:	00 00       	nop
        // Wait 1 us
			_delay_us(1);
        // Pull CLK low
			GPIO_write_low(&PORTD,SEGMENT_CLK);
 27e:	67 e0       	ldi	r22, 0x07	; 7
 280:	8b e2       	ldi	r24, 0x2B	; 43
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 288:	c6 95       	lsr	r28
 28a:	11 50       	subi	r17, 0x01	; 1
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 28c:	f1 f6       	brne	.-68     	; 0x24a <SEG_update_shift_regs+0x56>
 28e:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
		// Output DATA value (bit 0 of "position")
		if((position % 2)==0)// LSB is 0	
 290:	d0 fd       	sbrc	r29, 0
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <SEG_update_shift_regs+0xac>
		
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <SEG_update_shift_regs+0xb6>
		
		else
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	85 e2       	ldi	r24, 0x25	; 37
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2aa:	85 e0       	ldi	r24, 0x05	; 5
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <SEG_update_shift_regs+0xb8>
 2b0:	00 00       	nop
		    
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	8b e2       	ldi	r24, 0x2B	; 43
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2bc:	85 e0       	ldi	r24, 0x05	; 5
 2be:	8a 95       	dec	r24
 2c0:	f1 f7       	brne	.-4      	; 0x2be <SEG_update_shift_regs+0xca>
 2c2:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 2c4:	67 e0       	ldi	r22, 0x07	; 7
 2c6:	8b e2       	ldi	r24, 0x2B	; 43
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 2ce:	d6 95       	lsr	r29
 2d0:	c1 50       	subi	r28, 0x01	; 1
			
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2d2:	f1 f6       	brne	.-68     	; 0x290 <SEG_update_shift_regs+0x9c>
        position = position >> 1;
		
	}

    // Pull LATCH high
		GPIO_write_high(&PORTD,SEGMENT_LATCH);
 2d4:	64 e0       	ldi	r22, 0x04	; 4
 2d6:	8b e2       	ldi	r24, 0x2B	; 43
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <SEG_update_shift_regs+0xec>
 2e4:	00 00       	nop
    // Wait 1 us
		_delay_us(1);
 
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
