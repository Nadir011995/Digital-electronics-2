
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1d  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000744  00000000  00000000  00000ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a1  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 89 00 	call	0x112	; 0x112 <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);// Clear bit (and not)
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_config_input_pullup>:
  a8:	fc 01       	movw	r30, r24
  aa:	80 81       	ld	r24, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_config_input_pullup+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_config_input_pullup+0xa>
  ba:	92 2f       	mov	r25, r18
  bc:	90 95       	com	r25
  be:	89 23       	and	r24, r25
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	28 2b       	or	r18, r24
  c8:	21 83       	std	Z+1, r18	; 0x01
  ca:	08 95       	ret

000000cc <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high (volatile uint8_t *reg_name, uint8_t pin_num)
{
	 *reg_name = *reg_name | (1<<pin_num);// Set bit
  cc:	fc 01       	movw	r30, r24
  ce:	40 81       	ld	r20, Z
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <GPIO_write_high+0xe>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <GPIO_write_high+0xa>
  de:	24 2b       	or	r18, r20
  e0:	20 83       	st	Z, r18
  e2:	08 95       	ret

000000e4 <GPIO_toggle>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */

void GPIO_toggle (volatile uint8_t *reg_name, uint8_t pin_num)
{
 *reg_name = *reg_name ^ (1<<pin_num);	//Toggle bit(XOR)
  e4:	fc 01       	movw	r30, r24
  e6:	40 81       	ld	r20, Z
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <GPIO_toggle+0xe>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <GPIO_toggle+0xa>
  f6:	24 27       	eor	r18, r20
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_read>:

uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
   
	
	 if (bit_is_clear(PIND,pin_num))
  fc:	89 b1       	in	r24, 0x09	; 9
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <GPIO_read+0xa>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <GPIO_read+0x6>
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	82 27       	eor	r24, r18
	}
	else
	{
		return 0; // if the button is not pressed it returns the value 0
	}
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <main>:
 * library is used instead of low-level logic operations.
 */
int main(void)
{
    /* GREEN LED */
    GPIO_config_output(&DDRB, LED_GREEN);
 112:	65 e0       	ldi	r22, 0x05	; 5
 114:	84 e2       	ldi	r24, 0x24	; 36
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_GREEN); // Turn on Led, because active-high Led
 11c:	65 e0       	ldi	r22, 0x05	; 5
 11e:	85 e2       	ldi	r24, 0x25	; 37
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_high>
	

    /* second LED */
	 GPIO_config_output(&DDRC, LED_RED);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	87 e2       	ldi	r24, 0x27	; 39
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	 GPIO_write_high(&PORTC, LED_RED); // Turn off Led, because active-low Led
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_high>
 

    /* push button */
	
	GPIO_config_input_pullup(&DDRD,BIN);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	8a e2       	ldi	r24, 0x2A	; 42
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_config_input_pullup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	89 e6       	ldi	r24, 0x69	; 105
 148:	98 e1       	ldi	r25, 0x18	; 24
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x38>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x42>
 154:	00 00       	nop
    while (1)
    {
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);
		
				 perform=GPIO_read(&PORTD,BIN); // assign the function to the "perform"
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	8b e2       	ldi	r24, 0x2B	; 43
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_read>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

			if (perform==1)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	71 f7       	brne	.-36     	; 0x144 <main+0x32>
			{
				GPIO_toggle(&PORTB,LED_GREEN);
 168:	65 e0       	ldi	r22, 0x05	; 5
 16a:	85 e2       	ldi	r24, 0x25	; 37
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_toggle>
				GPIO_toggle(&PORTC,LED_RED);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	88 e2       	ldi	r24, 0x28	; 40
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_toggle>
 17c:	e3 cf       	rjmp	.-58     	; 0x144 <main+0x32>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
