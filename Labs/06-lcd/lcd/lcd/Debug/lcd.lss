
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000590  00000624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000590  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080014c  0080014c  00000670  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001579  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099c  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000950  00000000  00000000  000026a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aad  00000000  00000000  000036fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000041aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 c6 02 	jmp	0x58c	; 0x58c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

    // Put string(s) at LCD display
  	
	
	lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	00 e4       	ldi	r16, 0x40	; 64
 206:	11 e0       	ldi	r17, 0x01	; 1
	
	for (uint8_t i = 0; i < 64; i++)
	 {
		 // Store all new chars to memory line by line
		 lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
    // Put string(s) at LCD display
  	
	
	lcd_command(1 << LCD_CGRAM);
	
	for (uint8_t i = 0; i < 64; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
		 // Store all new chars to memory line by line
		 lcd_data(customChar[i]);
	 }

	 // Set pointer to beginning of CGRAM memory
 	 lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
  
	 lcd_gotoxy(1, 0);		// column: 1, line: 0
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	 lcd_puts("00:00.0");	// put string: all zero(s)
 222:	80 e4       	ldi	r24, 0x40	; 64
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>

	 lcd_gotoxy(0,0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	 lcd_putc(6);
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	 lcd_gotoxy(8,0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	 lcd_putc(7);
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	 lcd_gotoxy(11, 1);		// column: 11, row: 1
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8b e0       	ldi	r24, 0x0B	; 11
 24a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	 lcd_putc('c');			// put character 'c'
 24e:	83 e6       	ldi	r24, 0x63	; 99
 250:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 

	// Configure 8-bit Timer/Counter2 for Stopwatch
	// Enable interrupt and set the overflow prescaler to 16 ms

	TIM2_overflow_16ms();
 254:	e1 eb       	ldi	r30, 0xB1	; 177
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	87 60       	ori	r24, 0x07	; 7
 25c:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 25e:	e0 e7       	ldi	r30, 0x70	; 112
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	81 60       	ori	r24, 0x01	; 1
 266:	80 83       	st	Z, r24

	TIM0_overflow_16ms();
 268:	85 b5       	in	r24, 0x25	; 37
 26a:	8d 7f       	andi	r24, 0xFD	; 253
 26c:	85 bd       	out	0x25, r24	; 37
 26e:	85 b5       	in	r24, 0x25	; 37
 270:	85 60       	ori	r24, 0x05	; 5
 272:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 274:	ee e6       	ldi	r30, 0x6E	; 110
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 83       	st	Z, r24

     // Enables interrupts by setting the global interrupt mask
     sei();
 27e:	78 94       	sei
 280:	ff cf       	rjmp	.-2      	; 0x280 <main+0x8c>

00000282 <__vector_9>:




ISR(TIMER2_OVF_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <__vector_9+0x28>
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
	static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t seconds = 0;		// Seconds
	static uint8_t minutes = 0;		// Minutes
	static uint16_t  square_seconds = 0;
	char lcd_string[2] = "00";      // String for converting numbers by itoa()
 2ae:	80 e3       	ldi	r24, 0x30	; 48
 2b0:	90 e3       	ldi	r25, 0x30	; 48
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	89 83       	std	Y+1, r24	; 0x01

	

	number_of_overflows++;
 2b6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <number_of_overflows.1951>
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
	if (number_of_overflows > 5)
 2bc:	86 30       	cpi	r24, 0x06	; 6
 2be:	18 f4       	brcc	.+6      	; 0x2c6 <__vector_9+0x44>
	static uint16_t  square_seconds = 0;
	char lcd_string[2] = "00";      // String for converting numbers by itoa()

	

	number_of_overflows++;
 2c0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <number_of_overflows.1951>
 2c4:	cd c0       	rjmp	.+410    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	if (number_of_overflows > 5)
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
 2c6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <number_of_overflows.1951>
		tens++;
 2ca:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tens.1952>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
		
		if(tens > 9)	// If we reach the maximum of the Tenths 
 2d0:	8a 30       	cpi	r24, 0x0A	; 10
 2d2:	18 f4       	brcc	.+6      	; 0x2da <__vector_9+0x58>
	number_of_overflows++;
	if (number_of_overflows > 5)
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
		tens++;
 2d4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tens.1952>
 2d8:	97 c0       	rjmp	.+302    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		
		if(tens > 9)	// If we reach the maximum of the Tenths 
							// then we have to reset and Update seconds
		{
			tens = 0;
 2da:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <tens.1952>
			
			seconds++;
 2de:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <seconds.1953>
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <seconds.1953>


			if(seconds < 10)
 2e8:	8a 30       	cpi	r24, 0x0A	; 10
 2ea:	a8 f4       	brcc	.+42     	; 0x316 <__vector_9+0x94>
			{
				
				lcd_gotoxy(4, 0);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	84 e0       	ldi	r24, 0x04	; 4
 2f0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2f4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <seconds.1953>
 2f8:	4a e0       	ldi	r20, 0x0A	; 10
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 91 02 	call	0x522	; 0x522 <__itoa_ncheck>
				itoa(seconds, lcd_string, 10);
				lcd_putc('0');
 306:	80 e3       	ldi	r24, 0x30	; 48
 308:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_puts(lcd_string);
 30c:	ce 01       	movw	r24, r28
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 314:	11 c0       	rjmp	.+34     	; 0x338 <__vector_9+0xb6>
				
			}
			else
			{
				lcd_gotoxy(4, 0);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 31e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <seconds.1953>
 322:	4a e0       	ldi	r20, 0x0A	; 10
 324:	be 01       	movw	r22, r28
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 91 02 	call	0x522	; 0x522 <__itoa_ncheck>
				itoa(seconds, lcd_string, 10);
				lcd_puts(lcd_string);
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
			}
			if (seconds > 59)
 338:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <seconds.1953>
 33c:	8c 33       	cpi	r24, 0x3C	; 60
 33e:	08 f4       	brcc	.+2      	; 0x342 <__vector_9+0xc0>
 340:	63 c0       	rjmp	.+198    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			{
				seconds=0;
 342:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <seconds.1953>
				
				lcd_gotoxy(4, 0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 34e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <seconds.1953>
 352:	4a e0       	ldi	r20, 0x0A	; 10
 354:	be 01       	movw	r22, r28
 356:	6f 5f       	subi	r22, 0xFF	; 255
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 91 02 	call	0x522	; 0x522 <__itoa_ncheck>
				itoa(seconds, lcd_string, 10);
				lcd_puts(lcd_string);
 360:	ce 01       	movw	r24, r28
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				
				// Update minutes
				minutes++;
 368:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <minutes.1954>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <minutes.1954>
					
				if(minutes < 10)
 372:	8a 30       	cpi	r24, 0x0A	; 10
 374:	a8 f4       	brcc	.+42     	; 0x3a0 <__vector_9+0x11e>
				{
					lcd_gotoxy(1,0);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_putc('0');
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 384:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <minutes.1954>
 388:	4a e0       	ldi	r20, 0x0A	; 10
 38a:	be 01       	movw	r22, r28
 38c:	6f 5f       	subi	r22, 0xFF	; 255
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 91 02 	call	0x522	; 0x522 <__itoa_ncheck>
					itoa(minutes, lcd_string, 10);
					lcd_puts(lcd_string);
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 39e:	11 c0       	rjmp	.+34     	; 0x3c2 <__vector_9+0x140>
					
				}
				else
				{
					lcd_gotoxy(1,0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 3a8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <minutes.1954>
 3ac:	4a e0       	ldi	r20, 0x0A	; 10
 3ae:	be 01       	movw	r22, r28
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 91 02 	call	0x522	; 0x522 <__itoa_ncheck>
					itoa(minutes, lcd_string, 10);
					lcd_puts(lcd_string);
 3ba:	ce 01       	movw	r24, r28
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				}
				
				if (minutes > 59)
 3c2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <minutes.1954>
 3c6:	8c 33       	cpi	r24, 0x3C	; 60
 3c8:	50 f0       	brcs	.+20     	; 0x3de <__vector_9+0x15c>
				{
					
					minutes = 0;
 3ca:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <minutes.1954>
					lcd_gotoxy(1,0);
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_puts("00");
 3d6:	88 e4       	ldi	r24, 0x48	; 72
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
					
				}
				
				// Clearing the square of Second
				lcd_gotoxy(12, 0);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_putc(' ');
 3e6:	80 e2       	ldi	r24, 0x20	; 32
 3e8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_gotoxy(13, 0);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	8d e0       	ldi	r24, 0x0D	; 13
 3f0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_putc(' ');
 3f4:	80 e2       	ldi	r24, 0x20	; 32
 3f6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
				lcd_gotoxy(14, 0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	8e e0       	ldi	r24, 0x0E	; 14
 3fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_putc(' ');
 402:	80 e2       	ldi	r24, 0x20	; 32
 404:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			
			
		}
		
		// Displaying the square of seconds
		square_seconds= seconds*seconds;
 408:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <seconds.1953>
 40c:	88 9f       	mul	r24, r24
 40e:	c0 01       	movw	r24, r0
 410:	11 24       	eor	r1, r1
 412:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <square_seconds.1955+0x1>
 416:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <square_seconds.1955>
		lcd_gotoxy(11, 0);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	8b e0       	ldi	r24, 0x0B	; 11
 41e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 422:	4a e0       	ldi	r20, 0x0A	; 10
 424:	be 01       	movw	r22, r28
 426:	6f 5f       	subi	r22, 0xFF	; 255
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <square_seconds.1955>
 42e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <square_seconds.1955+0x1>
 432:	0e 94 91 02 	call	0x522	; 0x522 <__itoa_ncheck>
		itoa(square_seconds, lcd_string, 10);
		lcd_puts(lcd_string);
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		
		
		// Display hundredths of seconds
		lcd_gotoxy(7, 0);
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	87 e0       	ldi	r24, 0x07	; 7
 442:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 446:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tens.1952>
 44a:	4a e0       	ldi	r20, 0x0A	; 10
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 91 02 	call	0x522	; 0x522 <__itoa_ncheck>
		// Convert the value in decimal to string
		itoa(tens, lcd_string, 10);
		lcd_puts(lcd_string);
 458:	ce 01       	movw	r24, r28
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		// Update the tenths of second
		
	}

}
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	ff 91       	pop	r31
 46a:	ef 91       	pop	r30
 46c:	bf 91       	pop	r27
 46e:	af 91       	pop	r26
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	7f 91       	pop	r23
 476:	6f 91       	pop	r22
 478:	5f 91       	pop	r21
 47a:	4f 91       	pop	r20
 47c:	3f 91       	pop	r19
 47e:	2f 91       	pop	r18
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <__vector_16>:



ISR(TIMER0_OVF_vect)
{
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	4f 93       	push	r20
 49a:	5f 93       	push	r21
 49c:	6f 93       	push	r22
 49e:	7f 93       	push	r23
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	af 93       	push	r26
 4a6:	bf 93       	push	r27
 4a8:	cf 93       	push	r28
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
	static uint8_t position = 0;
	uint8_t i = 0;


	
	symbol++;
 4ae:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <symbol.1962>
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
	if(symbol > 5)
 4b4:	86 30       	cpi	r24, 0x06	; 6
 4b6:	18 f4       	brcc	.+6      	; 0x4be <__vector_16+0x34>
	static uint8_t position = 0;
	uint8_t i = 0;


	
	symbol++;
 4b8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <symbol.1962>
 4bc:	16 c0       	rjmp	.+44     	; 0x4ea <__vector_16+0x60>
	if(symbol > 5)
	{
		symbol = 0;
 4be:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <symbol.1962>
		position++;
 4c2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 4c6:	8f 5f       	subi	r24, 0xFF	; 255
		if(position > 9)
 4c8:	8a 30       	cpi	r24, 0x0A	; 10
 4ca:	18 f4       	brcc	.+6      	; 0x4d2 <__vector_16+0x48>
	
	symbol++;
	if(symbol > 5)
	{
		symbol = 0;
		position++;
 4cc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <__vector_16+0x60>
		if(position > 9)
		{
			position = 0;	
 4d2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
			lcd_gotoxy(1+i,1);	
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 4de:	ca e0       	ldi	r28, 0x0A	; 10
			while(i < 10) 
			{
				
				lcd_putc(' ');
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 4e6:	c1 50       	subi	r28, 0x01	; 1
		position++;
		if(position > 9)
		{
			position = 0;	
			lcd_gotoxy(1+i,1);	
			while(i < 10) 
 4e8:	d9 f7       	brne	.-10     	; 0x4e0 <__vector_16+0x56>
			 }
		}
		
	}
	
	lcd_gotoxy(1 + position, 1);
 4ea:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(symbol);
 4f6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <symbol.1962>
 4fa:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	
}
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	cf 91       	pop	r28
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__itoa_ncheck>:
 522:	bb 27       	eor	r27, r27
 524:	4a 30       	cpi	r20, 0x0A	; 10
 526:	31 f4       	brne	.+12     	; 0x534 <__itoa_ncheck+0x12>
 528:	99 23       	and	r25, r25
 52a:	22 f4       	brpl	.+8      	; 0x534 <__itoa_ncheck+0x12>
 52c:	bd e2       	ldi	r27, 0x2D	; 45
 52e:	90 95       	com	r25
 530:	81 95       	neg	r24
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__utoa_common>

00000538 <__utoa_ncheck>:
 538:	bb 27       	eor	r27, r27

0000053a <__utoa_common>:
 53a:	fb 01       	movw	r30, r22
 53c:	55 27       	eor	r21, r21
 53e:	aa 27       	eor	r26, r26
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	aa 1f       	adc	r26, r26
 546:	a4 17       	cp	r26, r20
 548:	10 f0       	brcs	.+4      	; 0x54e <__utoa_common+0x14>
 54a:	a4 1b       	sub	r26, r20
 54c:	83 95       	inc	r24
 54e:	50 51       	subi	r21, 0x10	; 16
 550:	b9 f7       	brne	.-18     	; 0x540 <__utoa_common+0x6>
 552:	a0 5d       	subi	r26, 0xD0	; 208
 554:	aa 33       	cpi	r26, 0x3A	; 58
 556:	08 f0       	brcs	.+2      	; 0x55a <__utoa_common+0x20>
 558:	a9 5d       	subi	r26, 0xD9	; 217
 55a:	a1 93       	st	Z+, r26
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	79 f7       	brne	.-34     	; 0x53e <__utoa_common+0x4>
 560:	b1 11       	cpse	r27, r1
 562:	b1 93       	st	Z+, r27
 564:	11 92       	st	Z+, r1
 566:	cb 01       	movw	r24, r22
 568:	0c 94 b6 02 	jmp	0x56c	; 0x56c <strrev>

0000056c <strrev>:
 56c:	dc 01       	movw	r26, r24
 56e:	fc 01       	movw	r30, r24
 570:	67 2f       	mov	r22, r23
 572:	71 91       	ld	r23, Z+
 574:	77 23       	and	r23, r23
 576:	e1 f7       	brne	.-8      	; 0x570 <strrev+0x4>
 578:	32 97       	sbiw	r30, 0x02	; 2
 57a:	04 c0       	rjmp	.+8      	; 0x584 <strrev+0x18>
 57c:	7c 91       	ld	r23, X
 57e:	6d 93       	st	X+, r22
 580:	70 83       	st	Z, r23
 582:	62 91       	ld	r22, -Z
 584:	ae 17       	cp	r26, r30
 586:	bf 07       	cpc	r27, r31
 588:	c8 f3       	brcs	.-14     	; 0x57c <strrev+0x10>
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
